#!/bin/python3

import os, signal
import click
from colorama import init as colorama_init
from colorama import Fore
from colorama import Style
import subprocess
from time import sleep
import json
import re
import inquirer
import psutil
import bitmath
import humanize
import lzma
from tqdm import tqdm

from xzhelpers import xz_get_uncompressed_size
import helpers
from helpers import clear_screen

def sigint_handler(signum, frame):
    #print(f'Signal handler called with signal {signum}')
    pass

# https://www.asciiart.eu/image-to-ascii
home_assistant_ascii_art_minimalist = """\
                ....                
              ........              
            ............            
          ................          
        ....................        
       ........      ........       
    ...........      ...........    
   .............    .............   
 ................  ................ 
.................  .................
.................  .....      ......
.................  .....      ......
........  .......  ....      .......
......      .....  ..    ...........
......      .....      .............
........      ...    ...............
............    .  .................
..............     .................
................   .................
"""



class HaosInstallConfig:
    def __init__(self):
        """
        The name of the disk to install to (ex. /dev/sda)
        """
        self.target_disk = ""

        self.source_image = ""

        self.source_image_version = ""


class LinuxDiskObject:
    def __init__(self):
        self.name = "" # ex. sda, sdb
        self.model = "" # ex. Samsung SSD 850 EVO
        self.size = "" # ex. 500GB

# If the installer script runs into an error that we can't recover from, we'll call this function.
def fail_catastrophically(error_message):
    print(f"""{Fore.RED}\
!!! Whoops! We ran into a situation that we can't recover from. The installation cannot continue.
!!! The installer failed with the following error:
    {error_message}
!!! The installer needs to restart.\
""")
    input("Press Enter to restart the installer...")
    exit(1)

# Instead of calling "dd", I've written a function that manually unpacks the IMG file and writes its contents directly to the selected disk.
# In addition to saving us a separate "uncompress" step, we have more control over the writing process, and can keep track of things like progress.
def install_haos(image_xz_path, target_drive):
    dev_path = f'/dev/{target_drive}' # The drive to write the image to

    # Our chunk size is the amount of data that we'll read and write at a time. Rather than read and write each byte, one after the other (which would be slow), 
    # we will read chunks of the data at a time, and write those chunks to the target disk. Much faster than the byte-by-byte method.
    # In my testing, 4MB was adequate for transfer speed.
    # This value will get converted to "bytes" later, and *that* value is what will be used. See "chunk_size_bytes" below.
    chunk_size_mb = 4

    # -----------------------
    # Determine uncompressed image size
    #print("Determining transfer size... ", end="", flush=True)
    uncompressed_size_in_bytes = xz_get_uncompressed_size(image_xz_path)
    #print(humanize.naturalsize(uncompressed_size_in_bytes, helpers.use_binary_size))

    # Tell the user what we're doing
    print()
    print(f"Writing image to {dev_path}...")

    # Create a progress bar using TQDM. We'll use it to indicate transfer progress.
    progress_bar = tqdm(
        total=uncompressed_size_in_bytes, 
        unit='iB', 
        unit_scale=True,
        desc="Writing image",
        ascii=' -\\|/-#',
        #ascii=' >=',
        smoothing=0.0 # 0=average, 1=exact
        )

    chunk_size_bytes = 1000*1000*chunk_size_mb  # Convert chunk_size_mb to bytes and store it. This is what we'll actually use.

    # Open a write-byte stream to the disk
    with open(f"{dev_path}", "wb") as disk_writer:
        with lzma.open(image_xz_path, 'rb') as xz_in:  # Open a read-byte stream to the compressed OS image. 
                                                       # LZMA will decompress it on-the-fly and give us the raw bytes.
            while True:
                chunk = xz_in.read(chunk_size_bytes)  # Read a single chunk into memory
                if not chunk:  # If we have no more data to read
                    break
                disk_writer.write(chunk)  # Write the chunk to the disk
                progress_bar.update(len(chunk))  # Update the progress bar

    # We're done writing at this point...
    progress_bar.close()
    print()
    print("Done writing image")
    print()
    return True

# Invokes the lsblk command in JSON mode (nice that it has that), and returns a filtered list of the system's internal disks
def get_disks():
    # use lsblk to get a list of disks that can be installed to, filtering out devices such as loop and ROM devices
    disks = []
    result = subprocess.run(['lsblk', '-o', 'NAME,SIZE,MODEL,TYPE', '--json'], 
                            stdout=subprocess.PIPE, 
                            text=True)
    json_data = json.loads(result.stdout)  # Parse the JSON output
    block_devices = json_data["blockdevices"]  # Get the block devices

    # Iterate through all of the block devices
    for block_device in block_devices:
        if block_device['type'] == "disk" and 'fd' not in block_device['name']:  # If medium type is "disk" (and not a floppy drive)
            # Gather information about the disk
            disk_obj = LinuxDiskObject()
            disk_obj.name = block_device['name']  # The block device name (eg. /dev/sda)
            disk_obj.size = block_device['size']  # The size of the disk in bytes
            if block_device['model'] and block_device['model'] != "null":  # If the disk has a (friendly) model name and it isn't null
                disk_obj.model = block_device['model']
            else:
                disk_obj.model = "UNKNOWN"  # We don't know the model name of the disk.
            disks.append(disk_obj)  # Add the disk to the list

    return disks


def print_error(message):
    print(f"{Fore.RED}{message}{Fore.RESET}")


if __name__ == "__main__":
    be_a_nag = True  # Do we want to ask the user twice before continuing?
    install_config: HaosInstallConfig = HaosInstallConfig()
    
    # Initialize colorama
    colorama_init()

    signal.signal(signal.SIGINT, sigint_handler)  # Add handler to handle (and dismiss) Ctrl-C/SIGINT events. 
                                                  # TODO: Expand on this; pause writing and ask the user what they want to do if break is pressed

    # Open the text file "/haos-image/imagename" and read it. 
    # This file contains the name of the Home Assistant image file, and is created by the build script that builds the ISO image.
    # I probably didn't need to do it this way. But it gives us the ability to know the version we're installing since it's in the image's filename.
    with open('/haos-image/imagename', 'r') as file:
        imagename = file.read().rstrip()
        install_config.source_image = f"/haos-image/{imagename}"
        if os.path.exists(install_config.source_image):
            print(f"Found HAOS image: {install_config.source_image}")
            # Get the version of the HAOS image
            sleep(0.5)

    clear_screen()  # Clear the console

    print(home_assistant_ascii_art_minimalist)  # Draw the ASCII art
    for _ in range(0,2):
        print()
    print("Welcome to the (unofficial) Home Assistant OS Installer!")  # Greet the user!

    print()

    # Check memory requirements (>4GB)
    total_system_memory = bitmath.Byte(psutil.virtual_memory().total)
    total_system_memory_mb = total_system_memory.to_MB().value
    # print(f"System has {total_system_memory.to_MB()} of total RAM")
    if total_system_memory_mb < 4000:
        print(f"""{Fore.YELLOW}\
WARNING: Your system has less than 4 GB of RAM. At least 8 GB is recommended for stable operation.
You may run into stability problems with multiple addons.
              
Your system has {round(total_system_memory_mb)} MB of RAM.
{Fore.RESET}""")


    print("""\
Choose the disk you would like to install Home Assistant OS onto.
Try using an SSD to get the best speeds and performance.

Please note that USB devices are strongly discouraged for reliability
and speed reasons.

The selected device will be completely erased for the installation.
""")

    disks = get_disks()
    disk_choices = []
    for disk in disks:
        disk_choices.append(f"{disk.name} - {disk.model} [{disk.size}]")

    questions = [
        inquirer.List('disk',
                    message="What disk do you want to install to?",
                    choices=disk_choices,
                    carousel=True
                    )
    ]

    try:
      answers = inquirer.prompt(questions, raise_keyboard_interrupt=True)
          
    except:
        print_error("Cancelled")
        exit(1)
    
    def find_disk_in_array_by_name(disks, value) -> LinuxDiskObject:
      for disk in disks:
        if disk.name == value:
          return disk
      return None

    # Retrieve the disk info from the collection based on the selection.
    target_disk_answer = answers['disk'].split()[0]
    selected_disk = find_disk_in_array_by_name(disks, target_disk_answer)
    if selected_disk == None:
        fail_catastrophically("The disk that was previously selected couldn't be found or doesn't match.")
    install_config.target_disk = selected_disk.name


    ### Ask user for confirmation before continuing.

    print()
    #print(f"It is recommended before installing that any disks you don't want to touch are removed, should something unexpected happen.")
    warning_message = f"ALL data on {install_config.target_disk} - {selected_disk.model} will be ERASED! Are you sure you want to continue?"
    first_warning_result = click.confirm(f"{Fore.YELLOW}{warning_message}{Fore.RESET}")
    if first_warning_result == False:
        exit(1)
    print()
    if be_a_nag:
        nag_warning_result = click.confirm(f"{Fore.YELLOW}{Style.BRIGHT}LAST WARNING!!!{Style.RESET_ALL}\n{Fore.YELLOW}{warning_message}{Fore.RESET}")
        if nag_warning_result == False:
            exit(1)

    print("Okay!")
    print()

    # Write the image to the selected disk
    install_haos(install_config.source_image, install_config.target_disk)
    
    print()
    print(f"{Fore.GREEN}Installation complete!{Fore.RESET}")
    questions = [
      inquirer.List('poweroptions',
                    message="What would you like to do?",
                    choices=["Reboot", "Shutdown"],
                    ),
    ]
    answers = inquirer.prompt(questions, raise_keyboard_interrupt=True)

    print("Remember to remove your boot media!")
    input("Press the Enter key to continue.")

    clear_screen()
    if answers['poweroptions'] == "Reboot":
        print("Rebooting now...")
        os.system("sudo reboot now")
        print()
    else:
        os.system("sudo shutdown now")
        print("Shutting down...")
        print()


